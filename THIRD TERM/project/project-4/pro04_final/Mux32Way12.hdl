CHIP Mux32Way12 {
    IN sel[5],
       in00_2[12], in00_1[12], in00_0[12],
       in01_2[12], in01_1[12], in01_0[12],
       in02_2[12], in02_1[12], in02_0[12],
       in03_2[12], in03_1[12], in03_0[12],
       in04_2[12], in04_1[12], in04_0[12],
       in05_2[12], in05_1[12], in05_0[12],
       in06_2[12], in06_1[12], in06_0[12],
       in07_2[12], in07_1[12], in07_0[12],
       in08_2[12], in08_1[12], in08_0[12],
       in09_2[12], in09_1[12], in09_0[12],
       in10_2[12], in10_1[12], in10_0[12],
       in11_2[12], in11_1[12], in11_0[12],
       in12_2[12], in12_1[12], in12_0[12],
       in13_2[12], in13_1[12], in13_0[12],
       in14_2[12], in14_1[12], in14_0[12],
       in15_2[12], in15_1[12], in15_0[12],
       in16_2[12], in16_1[12], in16_0[12],
       in17_2[12], in17_1[12], in17_0[12],
       in18_2[12], in18_1[12], in18_0[12],
       in19_2[12], in19_1[12], in19_0[12],
       in20_2[12], in20_1[12], in20_0[12],
       in21_2[12], in21_1[12], in21_0[12],
       in22_2[12], in22_1[12], in22_0[12],
       in23_2[12], in23_1[12], in23_0[12],
       in24_2[12], in24_1[12], in24_0[12],
       in25_2[12], in25_1[12], in25_0[12],
       in26_2[12], in26_1[12], in26_0[12],
       in27_2[12], in27_1[12], in27_0[12],
       in28_2[12], in28_1[12], in28_0[12],
       in29_2[12], in29_1[12], in29_0[12],
       in30_2[12], in30_1[12], in30_0[12],
       in31_2[12], in31_1[12], in31_0[12];
    OUT out2[12], out1[12], out0[12];
    
    PARTS:
    // Usar multiplexores jerárquicos
    Mux8Way12(sel=sel[0..2], 
              a2=in00_2, a1=in00_1, a0=in00_0,
              b2=in01_2, b1=in01_1, b0=in01_0,
              c2=in02_2, c1=in02_1, c0=in02_0,
              d2=in03_2, d1=in03_1, d0=in03_0,
              e2=in04_2, e1=in04_1, e0=in04_0,
              f2=in05_2, f1=in05_1, f0=in05_0,
              g2=in06_2, g1=in06_1, g0=in06_0,
              h2=in07_2, h1=in07_1, h0=in07_0,
              out2=mux0_2, out1=mux0_1, out0=mux0_0);
              
    Mux8Way12(sel=sel[0..2], 
              a2=in08_2, a1=in08_1, a0=in08_0,
              b2=in09_2, b1=in09_1, b0=in09_0,
              c2=in10_2, c1=in10_1, c0=in10_0,
              d2=in11_2, d1=in11_1, d0=in11_0,
              e2=in12_2, e1=in12_1, e0=in12_0,
              f2=in13_2, f1=in13_1, f0=in13_0,
              g2=in14_2, g1=in14_1, g0=in14_0,
              h2=in15_2, h1=in15_1, h0=in15_0,
              out2=mux1_2, out1=mux1_1, out0=mux1_0);
              
    Mux8Way12(sel=sel[0..2], 
              a2=in16_2, a1=in16_1, a0=in16_0,
              b2=in17_2, b1=in17_1, b0=in17_0,
              c2=in18_2, c1=in18_1, c0=in18_0,
              d2=in19_2, d1=in19_1, d0=in19_0,
              e2=in20_2, e1=in20_1, e0=in20_0,
              f2=in21_2, f1=in21_1, f0=in21_0,
              g2=in22_2, g1=in22_1, g0=in22_0,
              h2=in23_2, h1=in23_1, h0=in23_0,
              out2=mux2_2, out1=mux2_1, out0=mux2_0);
              
    Mux8Way12(sel=sel[0..2], 
              a2=in24_2, a1=in24_1, a0=in24_0,
              b2=in25_2, b1=in25_1, b0=in25_0,
              c2=in26_2, c1=in26_1, c0=in26_0,
              d2=in27_2, d1=in27_1, d0=in27_0,
              e2=in28_2, e1=in28_1, e0=in28_0,
              f2=in29_2, f1=in29_1, f0=in29_0,
              g2=in30_2, g1=in30_1, g0=in30_0,
              h2=in31_2, h1=in31_1, h0=in31_0,
              out2=mux3_2, out1=mux3_1, out0=mux3_0);
    
    // Selección final basada en los 2 bits más significativos
    Mux4Way12(sel=sel[3..4],
              a2=mux0_2, a1=mux0_1, a0=mux0_0,
              b2=mux1_2, b1=mux1_1, b0=mux1_0,
              c2=mux2_2, c1=mux2_1, c0=mux2_0,
              d2=mux3_2, d1=mux3_1, d0=mux3_0,
              out2=out2, out1=out1, out0=out0);
}
